#!/bin/bash

# Author: Bruno Guimar√£es
# Description: Setup development environment turning a raw system into a customized capable system
# Version: 1.0
# Last Updated: 18/03/2024

# Enable alias expansion
shopt -s expand_aliases 

# Helpers
alias apti="sudo apt install -y"

HD_NAME="Bruno"
USER_HOME="$HOME"
SCRIPT_PATH=$(dirname "$(realpath "$0")")

# Function to display script usage information
usage() {
  cat <<EOF
$(basename $0) - Setup development environment

Description:
    $(basename $0) is a script for setting up a raw system. It allows you to turn a raw system into a customized capable configured system.
    More information at the official repository at: https://github.com/Brunobrlk/dev-environment

Usage:
    $(basename $0) [options] 

Options:
    -h, --help                    Display this help message and exit
    --hd-name=HD_NAME             Receives the external HD name where your user resources are
    --wallpaper=IMAGE             Receives the image name located at Backup/Wallpapers/
    --add-softwares=PACKAGES      Receives a list of softwares to be installed separated by space
    --ignore-all                  This option ignores all default packages that would be installed
    --ignore=PACKAGES             Receives a list of codes related to packages that must be ignored (See github repository: https://github.com/Brunobrlk/dev-environment)

Examples:
    $(basename $0) --hd-name="Bruno" --wallpaper="SaoWallpaper.png" --add-softwares="krita spotify blender" --ignore-all      Will get resources from /media/user/Bruno, set wallpaper to Backup/Pictures/Wallpapers/SaoWallpaper.png and will ignore all default packages and install only krita, spotify and blender.
EOF
exit 0
}

# Parse command-line options
while [[ $# -gt 0 ]]; do
    case $1 in
        -h | --help)
            usage
            ;;
        --hd-name=*)
            echo "hd-name is set"
            # Handle logic
            ;;
        --wallpaper=*)
            echo "wallpaper is set"
            # Handle logic
            ;;
        # Add more flags here
        --add-softwares=*)
            echo "add-softwares is set" 
            # Handle logic
            ;;
        --ignore-all)
            echo "ignore-all is set"
            # Handle logic
            ;;
        --ignore=*)
            echo "ignore is set"
            # Handle logic
            ;;
        -*)
            echo "Error: Unknown option: $1"
            usage
            ;;
        *)
            break
            ;;
    esac
    shift
done


# Create .local/bin folder if doesn't exist yet
mkdir -p "$USER_HOME/.local/bin"
source "$USER_HOME/.profile"

# Other resources
HD_PATH="/media/$(whoami)/$HD_NAME"
cp -rv "$HD_PATH/Backup/Pictures" "$USER_HOME" & PICTURES_PID=$!
cp -rv "$HD_PATH/Backup/Documents" "$USER_HOME" & DOCUMENTS_PID=$!
cp -rv "$HD_PATH/Backup/Development" "$USER_HOME" & DEVELOPMENT_PID=$!
cp -rv "$HD_PATH/Backup/Videos" "$USER_HOME" & VIDEOS_PID=$!
cp -rv "$HD_PATH/Backup/Music" "$USER_HOME" & MUSIC_PID=$!
cp -rv "$HD_PATH/Backup/Downloads" "$USER_HOME" & DOWNLOADS_PID=$!
cp -rv "$SCRIPT_PATH/.utils" "$USER_HOME" &
cp "$SCRIPT_PATH/.bash_aliases" "$USER_HOME"

# Setup GUI - Install Theme and Change background
DESKTOP_THEME="Adapta-Nokto"
ICON_THEME="Mint-Y-Dark-Blue"
WALLPAPER="SaoWallpaper.png"

if [ "$(lsb_release -rs)" = "21.3" ]; then
  ICON_THEME="Mint-L-Blue"
fi

mkdir -p "$USER_HOME/.themes"
unzip "$HD_PATH/Backup/$DESKTOP_THEME.zip"
mv "$SCRIPT_PATH/$DESKTOP_THEME" "$USER_HOME/.themes/"

gsettings set org.cinnamon.desktop.interface gtk-theme "$DESKTOP_THEME"
gsettings set org.cinnamon.desktop.wm.preferences theme "$DESKTOP_THEME"
gsettings set org.cinnamon.desktop.interface icon-theme "$ICON_THEME"
gsettings set org.cinnamon.desktop.interface gtk-theme "$DESKTOP_THEME"
gsettings set org.cinnamon.desktop.background picture-uri "file://$USER_HOME/Pictures/Wallpapers/$WALLPAPER"

# Make the system up to date
sudo apt dist-upgrade -y

# Install common dependencies
apti build-essential gdb curl libbz2-dev libffi-dev liblzma-dev libncursesw5-dev libreadline-dev libsqlite3-dev libssl-dev libxml2-dev libxmlsec1-dev llvm make tk-dev wget xz-utils zlib1g-dev bash file git unzip xz-utils jq zip clang cmake ninja-build libgtk-3-dev

# Install personal scripts
cp -rv "$SCRIPT_PATH/shell-scripts" "$USER_HOME/.local/bin/"
cd "$USER_HOME/.local/bin/shell-scripts" && "./setup"

# Install and configure asdf 
git clone https://github.com/asdf-vm/asdf.git "$USER_HOME/.asdf" --branch v0.14.0

echo ". \"\$HOME/.asdf/asdf.sh\"" >> "$USER_HOME/.bashrc"
echo ". \"\$HOME/.asdf/completions/asdf.bash\"" >> "$USER_HOME/.bashrc"
source "$USER_HOME/.bashrc"
. "$USER_HOME/.asdf/asdf.sh"

## Add language/framework asdf plugins
asdf plugin-add neovim
asdf plugin-add gradle
asdf plugin-add java
asdf plugin-add kotlin
asdf plugin-add python
asdf plugin-add nodejs
asdf plugin-add rust
asdf plugin-add flutter
asdf plugin-add sqlite

## Install SQLite
asdf install sqlite latest
asdf global sqlite latest

## Install Gradle
asdf install gradle 3.3
asdf install gradle 7.6.3
asdf install gradle latest
asdf global gradle latest

## Install Kotlin
asdf install kotlin 1.8.0
asdf install kotlin latest
asdf global kotlin latest

## Install Java
asdf install java corretto-8.392.08.1
asdf install java liberica-1.8.0
asdf install java openjdk-17
asdf install java latest
asdf global java latest 

## Install Python
asdf install python latest
asdf global python latest

## Install NodeJS
asdf install nodejs latest
asdf global nodejs latest

## Install Rust
asdf install rust latest
asdf global rust latest

## Install flutter
asdf install flutter latest
asdf global flutter latest
flutter doctor --android-licenses
flutter doctor

## Install Neovim
## For some reason it only works in the home kkkkkkkkkkkkkkkk
cd
asdf install neovim latest
asdf global neovim latest

# Install Lunar Vim
# Make sure you have nodejs, python and rust installed via asdf
# Then follow lunar vim installation
no | LV_BRANCH='release-1.3/neovim-0.9' bash <(curl -s https://raw.githubusercontent.com/LunarVim/LunarVim/release-1.3/neovim-0.9/utils/installer/install.sh)
cp "$SCRIPT_PATH" "$USER_HOME/.config/lvim"

## Download Nerd Fonts
mkdir -p "$USER_HOME/.local/share/fonts"
cd "$USER_HOME/.local/share/fonts" && curl -fLO https://github.com/ryanoasis/nerd-fonts/raw/HEAD/patched-fonts/DroidSansMono/DroidSansMNerdFont-Regular.otf

# Install Alacritty - Terminal Emulator
sudo add-apt-repository ppa:aslatter/ppa -y
sudo apt update
sudo apt install alacritty -y

cd "$USER_HOME/.local/share/fonts" && url -fLO https://github.com/ryanoasis/nerd-fonts/raw/HEAD/patched-fonts/UbuntuMono/Regular/UbuntuMonoNerdFont-Regular.ttf
cd "$USER_HOME/.themes/Alacritty" && curl -LO --output . https://github.com/catppuccin/alacritty/raw/main/catppuccin-macchiato.toml
cp "$SCRIPT_PATH/.alacritty.toml" "$USER_HOME/.alacritty.toml"

# Install tmux
apti tmux
apti xsel
git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm

cp "$SCRIPT_PATH/.tmux.conf" "$USER_HOME/"
tmux source "$USER_HOME/.tmux.conf"

# Install common softwares
TMP_FOLDER="$USER_HOME/TemporaryFolder"
mkdir -p "$TMP_FOLDER"
cd "$TMP_FOLDER"

## Install PCSX2
apti pcsx2

## Install Joystick Calibrator
apti jstest-gtk

## Install Torrent/Transmission
apti transmission

## Install Terminal Translator
apti translate-shell

## Install tldr
apti tldr

## Install Google Chrome
wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
sudo dpkg -i google-chrome-stable_current_amd64.deb
sudo apt-get install -f -y

## Install Firefox
apti firefox

## Install Brave
sudo curl -fsSLo /usr/share/keyrings/brave-browser-archive-keyring.gpg https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg
echo "deb [arch=amd64 signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg] https://brave-browser-apt-release.s3.brave.com/ stable main"|sudo tee /etc/apt/sources.list.d/brave-browser-release.list
sudo apt update
apti brave-browser

## Install Discord
wget -O discord.deb "https://discord.com/api/download?platform=linux&format=deb"
sudo dpkg -i discord.deb
sudo apt install -f -y

## Install Skype
apti skypeforlinux
sudo cp /etc/apt/trusted.gpg /etc/apt/trusted.gpg.d/

## Install Gimp
apti gimp

## Install Libreoffice
apti libreoffice

## Install Webcam
apti guvcview

## Install Kdenlive
apti kdenlive

## Install OBS Studio
apti obs-studio

## Install Shotcut
apti shotcut

## Install VLC
apti vlc

## Install Anydesk
sudo wget -qO - https://keys.anydesk.com/repos/DEB-GPG-KEY | sudo gpg --dearmor --yes --output /etc/apt/trusted.gpg.d/anydesk.gpg
echo "deb http://deb.anydesk.com/ all main" | sudo tee /etc/apt/sources.list.d/anydesk-stable.list
sudo apt update
apti anydesk

## Install TeamViewer
wget https://download.teamviewer.com/download/linux/teamviewer_amd64.deb
sudo dpkg -i teamviewer_amd64.deb
sudo apt-get install -f -y

## Install Virt Manager(Require to reboot)
apti qemu-kvm
apti libvirt-daemon-system libvirt-clients
sudo adduser "$(whoami)" kvm
apti virt-manager

## Install Dbeaver
wget -O dbeaver.deb https://dbeaver.io/files/dbeaver-ce_latest_amd64.deb
sudo dpkg -i dbeaver.deb
sudo apt-get install -f -y

## Install Insomnia
wget -O insomnia.deb https://updates.insomnia.rest/downloads/ubuntu/latest
sudo dpkg -i insomnia.deb
sudo apt-get install -f -y

## Install Postman
curl -L -o postman.tar.gz https://dl.pstmn.io/download/latest/linux64
tar -xzf postman.tar.gz
sudo mv Postman /opt
sudo ln -s /opt/Postman/Postman /usr/local/bin/postman

## Install Genymotion(Didn't find any mechanism to get the latest version automatically)
latest_version="3.6.0"
download_url="https://dl.genymotion.com/releases/genymotion-$latest_version/genymotion-$latest_version-linux_x64.bin"
wget "$download_url"
chmod +x genymotion-$latest_version-linux_x64.bin
yes | sudo ./genymotion-$latest_version-linux_x64.bin -d /opt
sudo ln -s /opt/genymotion/genymotion-shell "$USER_HOME/.local/bin"
sudo ln -s /opt/genymotion/gmtool "$USER_HOME/.local/bin"

## Install vscode
curl -L -o vscode.deb "https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64"
sudo dpkg -i vscode.deb
sudo apt install -f -y

# Clean up unused resources
cd
rm -rf "$TMP_FOLDER"

## Install Android Studio versions and emulators
wait $DOWNLOADS_PID
"$SCRIPT_PATH/shell-scripts/setup_android_studio"

echo "Verifying and waiting all copying jobs to finish..."
wait $PICTURES_PID $DOCUMENTS_PID $DEVELOPMENT_PID $VIDEOS_PID $MUSIC_PID
echo "All files have been copied. Script finished successifully!"
